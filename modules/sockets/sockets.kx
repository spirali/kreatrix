/*
   sockets.kx
   Copyright (C) 2007, 2008  Stanislav Bohm

   This file is part of Kreatrix.

   Kreatrix is free software; you can redistribute it and/or modify it under
   the terms of the GNU General Public License as published by the Free
   Software Foundation; either version 2, or (at your option) any later
   version.

   Kreatrix is distributed in the hope that it will be useful, 
   but WITHOUT ANY WARRANTY; without even the implied warranty 
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Kreatrix; see the file COPYING. If not, see 
   <http://www.gnu.org/licenses/>.
*/
	
(isLoaded: #sockets) ifTrue: [ ^getModule: #sockets ].
registerAs: #sockets.

loadCLibrary: "sockets".


Socket do: {
	
	send: = { :anObject | sendByteArray: anObject asByteArray. }.


	waitForReading = { ^waitForReadingTimeout: (-1) }.
	waitForWriting = { ^waitForWritingTimeout: (-1) }.
	waitForReadingWriting = { ^waitForReadingWritingTimeout: (-1) }.

    startBuffering = {
		(parent == sockets BufferedSocket) ifTrue: [ ^self ].
		parent: sockets BufferedSocket.
		init.
	}.
}.

BufferedSocket = Socket clone do: {
	type = "BufferedSocket".
	
	buffer = ByteArray clone.

	init = { buffer = ByteArray clone }.

	readLineIfClose: = { :aBlock | |line|
		line << readLine.
		^line isNil ifTrue: aBlock ifFalse: [ line ].
	}.

	readLine = {
		(buffer isEmpty not and: [ (buffer containsByte: '\n') ]) ifTrue: [
			^buffer cutLine.
		].
		^_readUntilLine.
	}.

	_readUntilLine = {
		|buf|
		[
			buf << receiveByteArraySize: 4096.
			buf ifNil: [
				buffer isEmpty ifTrue: [
					^nil.
				].
				buf << buffer. 
				buffer = ByteArray clone.
				^buf asString.
			].
		    buffer add: buf.
		    buf containsByte: '\n'.
		] whileFalse.
		^buffer cutLine.
	}

}.

Poll do: {

	PollResult = Integer clone do: {
		type = "PollResult".

		canRead = {
			^ (self bitAnd: sockets Poll POLLIN) isNotZero.
		}.

		canWrite = {
			^ (self bitAnd: sockets Poll POLLOUT) isNotZero.
		}.

		hasEvent = {
			^ self isNotZero.
		}.
	}.

	waitForWriting: = { :anObject |
		add: anObject withFlags: POLLOUT.
	}.

	waitForReading: = { :anObject |
		add: anObject withFlags: POLLIN.
	}.


	foreachEvent: = { :aBlock | 
		foreach: [ :each :status |
			status hasEvent ifTrue: 
				[ aBlock valueWithList: #(each status). ].
		].
	}.

	foreachWriteEvent: = { :aBlock | 
		foreach: [ :each :status |
			status canWrite ifTrue: 
				[ aBlock valueWithList: #(each status). ].
		].
	}.

	foreachReadEvent: = { :aBlock | 
		foreach: [ :each :status |
			status canRead ifTrue: 
				[ aBlock valueWithList: #(each status). ].
		].
	}.


}.

IPAddress do: { 
	fromHostName:port: = { :aString :aNumber |
		^(fromHostName: aString) port: aNumber.
	}.
}

