import: "xml".

localImport: "utils.kx".
localImport: "type.kx".
localImport: "function.kx".
localImport: "wrapper.kx".
localImport: "class.kx".
localImport: "struct.kx".
localImport: "enum.kx".


Constant = Object clone do: {
	type = "Constant".
	name <- "".
	value <- "".
	valueType <- "".

	valueCode = {
		^#("KX" (valueType asUppercase) "(" value ")") asString.
	}.

	getCode = { 
		^"\tkxobject_set_slot_no_ref2(self, KXSYMBOL(\"",name,"\"),",valueCode,");\n".
	}.
}.

IntegerConstant = Constant clone do: {
	type = "IntegerConstant".
	
	valueType = "integer".
}.

Generator = Object clone do: {
	type = "Generator".
	
	constants = #().

	addType: = { :aType |
		types add: aType.
	}.

	initTypes = { 
		types = #(GTypeVoid).

		types add: (GTypePrimitive clone 
			name: "integer" cname: "gint" convertName: "int").
		types add: (GTypePrimitive clone 
			name: "integer" cname: "guint" convertName: "int").
		types add: (GTypePrimitive clone 
			name: "string" cname: "gchar*" convertName: "cstring").
		types add: (GTypePrimitive clone 
			name: "gboolean" cname: "gboolean" convertName: "gboolean").
		types add: (GTypePrimitive clone 
			name: "float" cname: "gdouble" convertName: "double").
		types add: (GTypePrimitive clone 
			name: "integer" cname: "guint32" convertName: "int").


		addType: (GType clone name: "GdkEvent" cname: "GdkEvent*").
		addType: (GTypePrimitive clone name: "GdkEvent" cname: "GdkEventKey*" convertName: "GdkEvent").

	}.

	

	loadEnums = {
		|enums|
		enums << GEnum loadFromFile: "enums.txt".

		enums foreach: [ :each | 
			constants join: each getConstants.
			addType: each getType.
		].
	}.

	initTypes.

	loadEnums.


	document = xml Document clone readFile: "class.xml".

	rootClass = GClass clone.
	rootClass generator: self.

	rootClass loadFromElement: (document rootElement child: "class").

	allWrappers = rootClass allClasses.

	/*allClasses foreach: [ :class |
		class generator: nil.
		class parent: nil.
		class childrens: nil.
	].*/



	functions = #().


	headers = {
		^allWrappers collect: [ :class | class filenameH ].
	}.
	
	
	initialize = {
		allWrappers join: (GStruct loadFromFileType1: "structs.txt" generator: self).
		types join: (allWrappers collect: [ :wrapper | wrapper getType ]).
	}.

	includeString = { 
		includeString = 
			(headers collect: [ :filename | "#include \"",filename,"\"\n" ]) asString.
		includeString = includeString, "#include \"gtk_utils.h\"".
		^includeString.
	}.

	loadFunctions = { |linenumber file|
		file << (File clone name: "functions.txt") openForReading.
		linenumber << 0.
		file foreachLine: [ :line | |definition|
			linenumber << linenumber + 1.
			line << line trim.
			((line beginsWith: "//") \/ (line == "")) ifFalse: [
				definition <<  (GFuncDefinition clone fromString: line atLine: linenumber).
				functions add: (GFunction cloneWithDefinition: definition generator: self).
			].
		].
		file close.
	}.

	findType: = { :typeName |
		^types detect: [ :type | type cname == typeName ] ifNone: [ 
			throw: (Exception clone message: "Unknown type '",typeName,"'").
		].
	}.

	findType:lineNumber: = { :typeName :aLineNumber |
		^types detect: [ :type | type cname == typeName ] ifNone: [ 
			throw: (Exception clone message: "functions:",aLineNumber,":Unknown type '",typeName,"'").
		].
	}.

	
	initFunctionsForWrappers = {
		allWrappers foreach: [ :class | class initFunctions ].
	}.

	/*checkFunctions = { |list|
		list << functions select: [ :func | func slotName isNil ].
		list isEmpty ifFalse: [ 
			"Automatic name cannot be generated for functions: " println.
			list foreach: [ :func | func call println ].
			VM quit.
		].
	}.*/

	createMakefile = { |rep filenames|
		"Creating makefile ... " println.
		filenames << (allWrappers collect: 
				[ :class | 
					class filenameH," \\\n", class filenameC," \\\n" 
				]) asString.


		rep << Replacer clone loadTemplate: "Makefile-template.am".
		rep replaceDictionary: #(
			("%filenames%" => filenames)
		) asDictionary.
		rep saveTo: "../Makefile.am".
	}.

	constantsString = { 
		^(constants collect: [ :each | each getCode ]) asString.
	}.

	createModule = { |rep extensions prototypes removePrototypesString include|
		"Creating module ... " println.
		extensions << (allWrappers collect: 
				[ :class | 
					class initExtensionString,"\n"
				]) asString.
		prototypes << (allWrappers collect: 
				[ :class | 
					class callInitPrototypeString,"\n"
				]) asString.

		removePrototypesString << (allWrappers collect: 
				[ :class |
					"\t",class removePrototypeString,"\n" ]) asString.
		rep << Replacer clone loadTemplate: "module.c".
		rep replaceDictionary: #(
			("%init_extensions%" => extensions)
			("%remove_prototypes%" => removePrototypesString)
			("%init_prototypes%" => prototypes)
			("%constants%" => constantsString)
			("%include%" => includeString)
		) asDictionary.
		rep saveTo: "../gtk.c".
	}.
	

	create = {
		(args size > 0) ifTrue: [
			createMakefile.
		].
		createModule.
		allWrappers foreach: [ :class | class create ].
	}.

}.


Generator do: {
	initialize.
	loadFunctions.
	initFunctionsForWrappers.
	//checkFunctions.
	//functions foreach: [ :each | (each call , ":", each className,":", each returnType ,"/",(each params asStringDelimiter: ",")) println. ].
	create.

	//allClasses foreach: [ :class | (class name, " ", class functions printString) println].
}.

