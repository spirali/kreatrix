/*
   function.kx
   Copyright (C) 2007, 2008  Stanislav Bohm

   This file is part of Kreatrix.

   Kreatrix is free software; you can redistribute it and/or modify it under
   the terms of the GNU General Public License as published by the Free
   Software Foundation; either version 2, or (at your option) any later
   version.

   Kreatrix is distributed in the hope that it will be useful, 
   but WITHOUT ANY WARRANTY; without even the implied warranty 
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Kreatrix; see the file COPYING. If not, see 
   <http://www.gnu.org/licenses/>.
*/
	

List asStringCamelCase = {
	^ first,allButFirst asStringCapitalized.
}.

List asStringCapitalized = {
	^(collect: [ :string | string capitalized ]) asString.
}.

GRawFunction = Object clone do: {
	type = "GRawFunction".

	
	numberOfParameters <- 0.


	codeString <- "KXRETURN(self)".

	slotName <- "returnSelf".

	wrapperCName <- "kx_return_self".

	code = {
		^"static KxObject *\n",wrapperCName,
		 " (KxObject *self, KxMessage *message)\n{\n",	
		 codeString,"\n}\n".
	}.



}.

/*GBasicFunction = GRawFunction clone do: {
	type = "GBasicFunction".

	generator <- nil.
	definition <- nil.

	initialize = {}.

	classCName = {
		^definition classCName.
	}.

	className = {
		^definition className.
	}.


}.*/



GFunction = Object clone do: {
	type = "GFunction".

	definition <- nil.
	generator <- nil.
	returnType <- nil.
	
	params <- #().

	isMethod = {
		^definition params size > 0 and: 
			[ classCName == definition params first].
	}.

	call = { ^definition call }.
	slotName <- "<unknown>".

	className = {
		^definition className.
	}.

	classCName = {
		^definition classCName.
	}.

	wrapperCName = {
	//	^(slotName asList collect: [ :char | char == ':' ifTrue: [ '_'] ifFalse: [ char ] ]) asString.
		^"kx",className asLowercase, "_", 
			(slotName replaceAll: ":" to: "_").
	}.

	addParams = {
		|p|
		params: #().
		isMethod ifTrue: [
			p << definition params allButFirst.
		] ifFalse: [
			p << definition params.
		].
		params join: (p collect: [ :param | 
			
			(generator findType: param lineNumber: definition lineNumber).
		]).
	}.

	codeGetParams = { |id|
		id << (-1).
		^((params collect: [ :param | 
			id << id + 1.
			param codeForGettingParamId: id.
		]) reject: [ :string | string isEmpty ]) asStringDelimiter: "\n".
	}.

	codeCallParams = { |list|
		list << #().
		0 to: params size do: [ :i |
			list add: "(", (params at: i) cname ,")param",i
		].
		^(list asStringDelimiter: ",")
	}.
	
	codeCall = { |str|

		isMethod 
			ifTrue: [ 
				str << call,"(self->data.ptr". 
				(params size > 0) ifTrue: [ str << str, "," ]. ]
			ifFalse: [ str << call,"(" ].
		
		^str,codeCallParams,")".

	}.

	numberOfParameters = {
		^params size.
	}.

	/*returnCode = {
		(definition options == "addRef") ifTrue: [ ^"KxObject *_ret = " ].
		^"return ".
	}.

	returnCodeEnd = {
		(definition options == "addRef") ifTrue: [ ^";\n\tKXRETURN(_ret)" ].
		^"".
	}.*/

	hasOption: = { :aString | 
		^definition hasOption: aString.
	}.


	code = { |str|
		str << "static KxObject *\n",wrapperCName,
		 " (KxObject *self, KxMessage *message)\n{\n",codeGetParams,"\n\t".
		returnType ignoreResult 
			ifTrue: [ str << str,codeCall,";\n\tKXRETURN(self);" ]
			ifFalse: [
				|call|
				call << "KX",
						returnType name asUppercase,"((",returnType cname,")",codeCall,");".

				(hasOption: "new") ifTrue: [ 
					str << str,"KxObject *_ret = ", call,"\n\tg_object_unref(_ret->data.ptr);\n\treturn _ret;".
				] ifFalse: [
					str << str,"return ", call.
				].
	
			].
		
		^str,"\n}\n".
	}.

	/*cloneWithDefinition:generator: = { :definition :generator |
		|func|
		func << GFunction clone.
		func definition: definition.
		func generator: generator.
		func initialize.
		func returnType: (generator findType: definition returnType lineNumber: definition lineNumber).
		^func.
	}.*/

	getSlotName = {
		definition hasSlotName ifTrue: [ 
			^definition slotName.
		].
		^generateSlotName.
	}.

	generateSlotName = { 
		|parts params|
		params << definition params.
		parts << definition callNameParts.
		((params size > 0) and: [ (params at: 0) == classCName ]) ifTrue: [
			(params size == 1) ifTrue: [
				(parts first == "get") ifTrue: [ 
					^(parts allButFirst asStringCamelCase)		
				].

				(parts first == "get") /\ 
				(returnType == "gboolean")  
					ifTrue: [
					^"is",(parts allButFirst asStringCapitalized).
				].
				^parts asStringCamelCase.

			].
			(params size == 2) ifTrue: [
				(parts first == "set") ifTrue: [
					^(parts allButFirst asStringCamelCase),":".
				].
				^(parts asStringCamelCase),":".
			].
		].

	/*	classCName println.
		params println.*/
	//	callNameParts println.
		^onNoAutomaticName.
	}.


	onNoAutomaticName = {
		("No automatic name for:", call) println.
		^"unknown".
	}.

	isFunctionForDefinition:generator: = true.

	initializeReturnType = {
		returnType: 
			(generator findType: definition returnType lineNumber: definition lineNumber).
	}.

	initialize = {
		slotName: getSlotName.
		addParams.
		initializeReturnType.
	}.

}.

GStructReader = GFunction clone do: { 
	type = "GFunction".

	isFunctionForDefinition:generator: = { :definition :generator |
		(definition options == "structReader") ifTrue: [ ^true ].
	 	^(definition returnType == "void") and: [ 
			(definition params size >= 2) /\ ((definition call contains: "get")) and: [ 
				(definition params first == definition classCName) and: [ |wrapper|
					wrapper << generator findWrapperByName: (definition params at: 1).

					wrapper isNil ifTrue: [ false ] 
								  ifFalse: [ wrapper isStruct ].
				].
			]
		].
	}.

	returnStruct <- nil.
	
	initialize = {
		resend initialize.
		returnStruct: (generator findWrapperByName: (definition params at: 1)).
	}.

	codeGetParams = { |id|
		id << (0).
		^((params allButFirst collect: [ :param | 
			id << id + 1.
			param codeForGettingParamId: id atPosition: (id - 1).
		]) reject: [ :string | string isEmpty ]) asStringDelimiter: "\n".
	}.

	codeCallParams = { |list|
		list << #( ("(",params first cname,") &param0") ).
		1 to: params size do: [ :i |
			list add: "(", (params at: i) cname ,")param",i
		].
		^(list asStringDelimiter: ",")
	}.

	code = { |str|
		str << "static KxObject *\n",wrapperCName,
		 " (KxObject *self, KxMessage *message)\n{\n",codeGetParams,"\n\t".
		str << str,returnStruct name, " param0;\n\t".
		str << str,codeCall,";\n".
		str << str,"\treturn KX",
					returnStruct name asUppercase,"(&param0);".

		^str,"\n}\n".
	}.

	generateSlotName = {
		^onNoAutomaticName.
	}.

	numberOfParameters = {
		^params size - 1.
	}.


}.


GFuncDefinition = Object clone do: {
	type = "GFuncDefinition".
	
	params <- #().
	call <- "".
	returnType <- nil.

	slotName <- nil.
	lineNumber <- 0.

	options <- "".

	gfunctionPrototypes = #(GStructReader GFunction).

	generator <- nil.

	prefix <- "<unset>".

	createGFunctionGenerator: = { :generator | |func proto|
		proto << gfunctionPrototypes detect: [ :proto | proto 
			isFunctionForDefinition: self generator: generator ].
		func << proto clone.
		func generator: generator.
		func definition: self.
		func initialize.
		^func.
	}.

	fromString:atLine: = { :aString :aLineNumber |
		|index names params|
		lineNumber: aLineNumber.
		index << aString find: "(".
		index ifNil: [  
			throw: (Exception clone message: 
				aLineNumber asString, ": invalid function definition").
		].
		names << aString sliceTo: (aString find:"(").
		params << aString sliceBetween: "(" and: ")".

		paramsFromString: params.
		namesFromString: names.
	}.

	getOptionsFromString: = { :aString |  |pos|
		(aString first == '$') ifFalse: [ ^aString ].
		options: (aString sliceBetween: "$" and: "$").
		pos << aString find: "$" from: 1.
		^(aString sliceFrom: pos+1).
	}.

	initPrefix = {
		|px|
		px << generator findMultiPartsPrefix: call.
		px isNil ifFalse: [ 
			prefix: px.
		] ifTrue: [ |list|
			list << call asListBy: "_".
			prefix: list first, "_", (list at: 1).
		].
	}.

	namesFromString: = { :aString | |list|
		aString << getOptionsFromString: aString.
		list << aString asListBy: " ".
		(list size == 3) ifTrue: [ 
			slotName: (list at: 0).
			returnType: (list at: 1).
			call: (list at: 2).
			initPrefix.
			^self.
		].

		returnType: (list at: 0).
		call: (list at: 1).
		initPrefix.
	//	slotName: (generateSlotName).
	}.

	hasSlotName = { 
		^slotName isNotNil.
	}.

	callNameParts = {
		^(callWithoutPrefix asListBy: "_").
	}.
	/*generateAutomaticSlotName = {
		(params size > 2) ifTrue: [ 
			throw: (Exception clone message: "Need manual name for function: ",call
		].
	}.*/

	paramsFromString: = { :aString | |list|
		list << ((aString asListBy: ",") collect: [ :param | |list str|
			list << (param asListBy: " ").
			str << (list allButLast asStringDelimiter: " ") trim.
			(list last beginsWith: "*") ifTrue: [ str,"*" ] ifFalse: [ str ].
		]).
		params: (list reject: [ :string | string == "" ]).
	}.

	className = { |parts|
		// HACK!
	/*	(call beginsWith: "gtk_check") ifTrue: [
			^"GtkCheckButton".
		].

		(call beginsWith: "gtk_text_buffer") ifTrue: [
			^"GtkTextBuffer".
		].

		(call beginsWith: "gtk_text_view") ifTrue: [
			^"GtkTextView".
		].

		(call beginsWith: "gtk_list_store") ifTrue: [
			^"GtkListStore".
		].

	/*	(call beginsWith: "gtk_list_view") ifTrue: [
			^"GtkListView".
		].*/

	/*	(call beginsWith: "gtk_tree_view") ifTrue: [
			^"GtkTreeView".
		].*/
	//	(call, " : ", prefix) println.
		^((prefix asListBy: "_") asStringCapitalized).// println.
	}.

	callWithoutPrefix = {
		^call sliceFrom: (prefix size).
	}.

	classCName = {
		^className,"*".
	}.

	hasOption: = { :aString |
		^options == aString.
	}.

}.



