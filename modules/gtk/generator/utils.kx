/*
   utils.kx
   Copyright (C) 2007, 2008  Stanislav Bohm

   This file is part of Kreatrix.

   Kreatrix is free software; you can redistribute it and/or modify it under
   the terms of the GNU General Public License as published by the Free
   Software Foundation; either version 2, or (at your option) any later
   version.

   Kreatrix is distributed in the hope that it will be useful, 
   but WITHOUT ANY WARRANTY; without even the implied warranty 
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Kreatrix; see the file COPYING. If not, see 
   <http://www.gnu.org/licenses/>.
*/
	
String replaceByDictionary: = { :aDictionary |
	|str|
	str << self.
	aDictionary foreachKeyValue: [ :key :value | 
		str << str replace: key to: value.
	].
	^str.	
}.

String cutPrefix: = { :prefix | 
	(beginsWith: prefix) ifTrue: [ ^sliceFrom: prefix size ].
}.

Replacer = Object clone do: {
	type = "Replacer".

	template <- "".
	replaceDictionary <- Dictionary clone.

	loadTemplate: = { :filename | 
		template: (File clone name: filename) openForReading contentAsString.
	}.

	saveTo: = { :filename | |file|
		file << File clone name: filename.
		file openForWriting.
		file closeAfter: [ 
			file write: (template replaceByDictionary: replaceDictionary).
		].
	}.
}.

String replaceAll:to: = { :pattern :target | 
	|new str| 
	str << self.
	[ new << str replace: pattern to: target. 
	  str == new ] whileFalse: [ str << new ].
	 ^str
}.

File appendFileWithName: = { :filename |
	|file|
	file << (File clone name: filename) openForReading.
	file closeAfter: [ 
		write: file contentAsString.
	].
}.
