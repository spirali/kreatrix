/*
   class.kx
   Copyright (C) 2007, 2008  Stanislav Bohm

   This file is part of Kreatrix.

   Kreatrix is free software; you can redistribute it and/or modify it under
   the terms of the GNU General Public License as published by the Free
   Software Foundation; either version 2, or (at your option) any later
   version.

   Kreatrix is distributed in the hope that it will be useful, 
   but WITHOUT ANY WARRANTY; without even the implied warranty 
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Kreatrix; see the file COPYING. If not, see 
   <http://www.gnu.org/licenses/>.
*/
	


GClass = GWrapper clone do: {
	type = "GClass".

	childrens <- #().


	isAbstract <- false.

	createParams <- "".
	prototypeCreateCode <- nil.

	cleanCode <- nil.

	initPrototypeExtraCode <- "".

	hasDefaultClone <- true.

	ownMarkCode <- "".

	unrefNew <- true.

	extraMarkCFunctions <- #().


	/*init = {
		childrens: #().
	:}.*/

	parentObject = {
		parent ifNil: [ ^"KXCORE->base_object" ].
		^parent name asLowercase.
	}.


	loadFromElement: = { :anElement |
		name: (anElement attribute: "name").
		(anElement hasAttribute: "createp") ifTrue: [ createParams: (anElement attribute: "createp") ].
		(anElement hasAttribute: "abstract") ifTrue: [ isAbstract: (anElement attribute: "abstract") == "true" ].
		anElement ifHasAttribute: "init" do: [ :value | initPrototypeExtraCode: value ].
		anElement ifHasAttribute: "defaultClone" do: [ :value | (value == "false") ifTrue: [ hasDefaultClone: false ] ].


		anElement ifHasAttribute: "mark" do: [ :value | ownMarkCode: value ].

		anElement ifHasAttribute: "prototype-create" do: [ :value | prototypeCreateCode: value ].
		anElement ifHasAttribute: "clean" do: [ :value | cleanCode: value ].
		anElement ifHasAttribute: "unref-new" do: [ :value | unrefNew: value == "true". ].

		extraMarkCFunctions: ((anElement childrens: "extra-mark") collect: [ :element | 
			element attribute: "cfunction".	
		]).
		
		loadChildrensFromElement: anElement.
	}.

	loadChildrensFromElement: = { :anElement |
		childrens: ((anElement childrens: "class") collect: [ :element |
			|class|
			class << GClass clone.
			class generator: generator.
			class parent: self.
			class loadFromElement: element.
		]).
	}.
	
	asString = { ^"GClass:",name }.

	functionsCode = { 
		^(functions collect: [ :func | func code ]) asString.
	}.

	functionsTableCode = { 
		^(functions collect: [ :func | 
			"\t\t{\"",func slotName,"\",", func numberOfParameters,",",func wrapperCName,"},\n" ]) asString.
	}.

	codeParentExtension = { |p|
		p << parentExtension.
		p ifNil: [ ^"NULL" ].
		^"&",p.
	}.

	initPrototypeDataCode = {
		prototypeCreateCode ifNil: [ 
			^"\n\tself->data.ptr = ", functionsPrefix,"_new(",createParams,");\n".
			].
		^prototypeCreateCode,"\n".
	}.

	
	initPrototypeCode = {
		isAbstract 
			ifTrue: [ ^initPrototypeExtraCode, "\n\tself->extension = &gtkabstractclass_extension;" ]
			ifFalse: [ 
				^initPrototypeExtraCode,initPrototypeDataCode,
					"\tkxgtk_set_wrapper(self, self->data.ptr);\n",
					(unrefNew ifTrue: [ "\tg_object_unref(self->data.ptr);\n" ] ifFalse: [ "" ]),
					"\tkxgtk_register_extension(", typeCName, ", &", extensionName, ");\n".

			]
	}.

	
	extraCode = {
		|str|
		str << resend extraCode.
	
		cleanCode ifNotNil: [ 
			str << "void ",name asLowercase,"_ext_clean(KxObject *self) {\n\t", cleanCode, "\n}\n".

		].
		
		^str.
	}.

	initExtensionCode = {
		|str|
		str << resend initExtensionCode.
	
		cleanCode ifNotNil: [ 
			str << extensionName,".clean = ",name asLowercase,"_ext_clean;\n".

		].
		
		^str.
	}.



	allClasses = {
		|list|
		list << #(self).
		childrens foreach: [ :child | list join: child allClasses ].
		^list.
	}.

	initExtensionString = {
		^"\tkx", name asLowercase, "_extension_init();".
	}.

	callInitPrototypeString = {
		|var str|
		var << name asLowercase.
		str << "\tKxObject *",var," = kx", name asLowercase, "_new_prototype(", parentObject, ");\n".

		isAbstract 
			ifTrue: [ ^str, "\tkxobject_set_slot_no_ref2(self, KXSYMBOL(\"",slotName,"\"),",var,");\n". ]
			ifFalse: [ ^str,
						"\tkxcore_add_prototype(KXCORE, ",var,");\n",
						"\tkxobject_set_slot_no_ref2(self, KXSYMBOL(\"",slotName,"\"),",var,");\n".
			].

	}.

	createDefaultCloneFunction = { 	
			|func|
			func << GRawFunction clone.
			func slotName: "clone".
			func wrapperCName: functionsPrefix,"_clone".
			func codeString: ("\tKxObject *clone = kxobject_raw_clone(self);\n",
							  "\tclone->data.ptr = ", functionsPrefix, "_new(",createParams,");\n",
							  "\tkxgtk_set_wrapper(clone, clone->data.ptr);\n",
							  (unrefNew ifTrue: [ "\tg_object_unref(clone->data.ptr);\n" ] ifFalse: [ "" ]),
	//						  "\tg_object_ref_sink(clone->data.ptr);",
							  "\treturn kxobject_send_message_init(clone);"
							  ). 
			^func
	}.

	implicitFunctions = { |list|
		list << #().

		isAbstract not /\ hasDefaultClone  ifTrue: [
			list add: createDefaultCloneFunction.
		].
		^list.
	}.

	removePrototypeString = {
		isAbstract ifTrue: [ ^"" ].
		^resend removePrototypeString.
	}.

	
	initFunctions = { |lowerName list|
		lowerName << name asLowercase.
		list << (generator functions select: [ :func |
			func className asLowercase == lowerName. 
		]).
		functions: (implicitFunctions join: list).
	}.

	extraMarkCode = { |list|
		extraMarkCFunctions isEmpty ifTrue: [ ^"" ].
		list << #("GObject *gobject;\n").
		extraMarkCFunctions foreach: [ :each |
			list add: "\tgobject = G_OBJECT(",each,"(self->data.ptr));\n".
			list add: "\tif (gobject) \n\t\tkxgtk_mark_gobject(G_OBJECT(gobject));\n".
		]. 
		^list asString.
	}.

	markCode = {
		^"kxgtk_mark_container(self->data.ptr);\n\tkxgtk_mark_watched_closures(self->data.ptr);\n\t",
		  extraMarkCode,
		  ownMarkCode.
	}.

	newFromCode = {
^"""
	KxObject *self = kxgtk_check_wrapper((GObject*)data);
	if (self != NULL) {
		return self;
	}

	KxObject *proto = kxcore_get_prototype(core, &kx""",name asLowercase,"""_extension);
	self = kxobject_raw_clone(proto);
	self->data.ptr = data;
	kxgtk_set_wrapper(self, G_OBJECT(data));
	return self;
""" }.

	freeCode = { 
		^"kxgtk_remove_wrapper(self);"
	}.
}.


