/*
   type.kx
   Copyright (C) 2007, 2008  Stanislav Bohm

   This file is part of Kreatrix.

   Kreatrix is free software; you can redistribute it and/or modify it under
   the terms of the GNU General Public License as published by the Free
   Software Foundation; either version 2, or (at your option) any later
   version.

   Kreatrix is distributed in the hope that it will be useful, 
   but WITHOUT ANY WARRANTY; without even the implied warranty 
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Kreatrix; see the file COPYING. If not, see 
   <http://www.gnu.org/licenses/>.
*/
	


GBasicType = Object clone do: {
	type = "GBasicType".

	name <- "GType".
	cname <- "".

	ignoreResult <- false.

	convertName <- { 	
		(cname last == '*') ifTrue: [
			^cname sliceTo: (cname size - 1)
		].
		^cname 
	}.

	name:cname: = { :name :cname | 
		name: name.
		cname: cname.
	}.

	asString = { ^"(",name,")" }.

	codeForGettingParamId: = { :id |
		^"".
	}.

}.

GType = GBasicType clone do: {
	type = "GType".

	allowNil <- false.

	codeForGettingParamId: = { :id |
		//^"\tKXPARAM_TO_", convertName asUppercase,"(param",id, ",",id,");".
		^codeForGettingParamId: id atPosition: id.
	}.

	codeForGettingParamId:atPosition: = { :id :position |
		allowNil 
			ifTrue: [ 	
				^"\tKXPARAM_TO_", convertName asUppercase,"_OR_NULL(param",id, ",",position,");". 
			]
			ifFalse: [	
				^"\tKXPARAM_TO_", convertName asUppercase,"(param",id, ",",position,");". 
			]
	}.

}.


GTypePrimitive = GType clone do: {
	type = "GTypePrimitive".
	convertName:  "".

	name:cname:convertName: = { :name :cname :convertName |
		name: name.
		cname: cname.
		convertName: convertName.
	}.
}.

GTypeAlias = GBasicType clone do: {
	type = "GTypeAlias".

	gtype <- GBasicType.

	name = { 
		^gtype cname.
	}.

	cname:gtype: = { :aName :gtype | 
		cname: aName.
		gtype: gtype.
	}.
}.

GTypeConstant = GBasicType clone do: {
	type = "GTypeConstant".

	value <- "".
	name: "<Constant>".
}.

GTypeSelf = GTypeConstant clone do: {
	value: "self->data.ptr".
	name: "<Self>".
}.

GTypeVoid = GBasicType clone do: {
	name: "<void>".
	cname: "void".

	ignoreResult: true.
}.
