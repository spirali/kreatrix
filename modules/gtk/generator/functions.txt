
// GtkWindow
void                gtk_window_set_title                (GtkWindow *window,gchar *title);
setWMName:WMClass: void                gtk_window_set_wmclass              (GtkWindow *window,gchar *wmclass_name,gchar *wmclass_class);
setShrink:grow:autoShrink: void                gtk_window_set_policy               (GtkWindow *window,gint allow_shrink,gint allow_grow,gint auto_shrink);
void                gtk_window_set_resizable            (GtkWindow *window,gboolean resizable);
gboolean            gtk_window_get_resizable            (GtkWindow *window);
void                gtk_window_add_accel_group          (GtkWindow *window,GtkAccelGroup *accel_group);
void                gtk_window_remove_accel_group       (GtkWindow *window,GtkAccelGroup *accel_group);
gboolean            gtk_window_activate_focus           (GtkWindow *window);
gboolean            gtk_window_activate_default         (GtkWindow *window);
void                gtk_window_set_modal                (GtkWindow *window,gboolean modal);
defaultWidth:height: void                gtk_window_set_default_size         (GtkWindow *window,gint width,gint height);
widget:geometry:hint: void                gtk_window_set_geometry_hints       (GtkWindow *window,GtkWidget *geometry_widget,GdkGeometry *geometry,GdkWindowHints geom_mask);
void                gtk_window_set_gravity              (GtkWindow *window,GdkGravity gravity);
GdkGravity          gtk_window_get_gravity              (GtkWindow *window);
void                gtk_window_set_position             (GtkWindow *window,GtkWindowPosition position);
void                gtk_window_set_transient_for        (GtkWindow *window,GtkWindow *parent);
void                gtk_window_set_destroy_with_parent  (GtkWindow *window,gboolean setting);
//void                gtk_window_set_screen               (GtkWindow *window,GdkScreen *screen);
//GdkScreen*          gtk_window_get_screen               (GtkWindow *window);
gboolean            gtk_window_is_active                (GtkWindow *window);
gboolean            gtk_window_has_toplevel_focus       (GtkWindow *window);
//GList*              gtk_window_list_toplevels           (void);
addMnemonic:target: void                gtk_window_add_mnemonic             (GtkWindow *window,guint keyval,GtkWidget *target);
removeMnemonic:target: void                gtk_window_remove_mnemonic          (GtkWindow *window,guint keyval,GtkWidget *target);
activeMnemonic:modifier: gboolean            gtk_window_mnemonic_activate        (GtkWindow *window,guint keyval,GdkModifierType modifier);
gboolean            gtk_window_activate_key             (GtkWindow *window,GdkEventKey *event);
gboolean            gtk_window_propagate_key_event      (GtkWindow *window,GdkEventKey *event);
GtkWidget*          gtk_window_get_focus                (GtkWindow *window);
void                gtk_window_set_focus                (GtkWindow *window,GtkWidget *focus);
void                gtk_window_set_default              (GtkWindow *window,GtkWidget *default_widget);
void                gtk_window_present                  (GtkWindow *window);
void                gtk_window_present_with_time        (GtkWindow *window,guint32 timestamp);
void                gtk_window_iconify                  (GtkWindow *window);
void                gtk_window_deiconify                (GtkWindow *window);
void                gtk_window_stick                    (GtkWindow *window);
void                gtk_window_unstick                  (GtkWindow *window);
void                gtk_window_maximize                 (GtkWindow *window);
void                gtk_window_unmaximize               (GtkWindow *window);
void                gtk_window_fullscreen               (GtkWindow *window);
void                gtk_window_unfullscreen             (GtkWindow *window);
void                gtk_window_set_keep_above           (GtkWindow *window,gboolean setting);
void                gtk_window_set_keep_below           (GtkWindow *window,gboolean setting);
//void                gtk_window_begin_resize_drag        (GtkWindow *window,GdkWindowEdge edge,gint button,gint root_x,gint root_y,guint32 timestamp);
//void                gtk_window_begin_move_drag          (GtkWindow *window,gint button,gint root_x,gint root_y,guint32 timestamp);
void                gtk_window_set_decorated            (GtkWindow *window,gboolean setting);
void                gtk_window_set_deletable            (GtkWindow *window,gboolean setting);
setFrameLeft:top:right:bottom: void                gtk_window_set_frame_dimensions     (GtkWindow *window,gint left,gint top,gint right,gint bottom);
void                gtk_window_set_has_frame            (GtkWindow *window,gboolean setting);
void                gtk_window_set_mnemonic_modifier    (GtkWindow *window,GdkModifierType modifier);
void                gtk_window_set_role                 (GtkWindow *window,gchar *role);
void                gtk_window_set_type_hint            (GtkWindow *window,GdkWindowTypeHint hint);
void                gtk_window_set_skip_taskbar_hint    (GtkWindow *window,gboolean setting);
void                gtk_window_set_skip_pager_hint      (GtkWindow *window,gboolean setting);
void                gtk_window_set_urgency_hint         (GtkWindow *window,gboolean setting);
void                gtk_window_set_accept_focus         (GtkWindow *window,gboolean setting);
void                gtk_window_set_focus_on_map         (GtkWindow *window,gboolean setting);
gboolean            gtk_window_get_decorated            (GtkWindow *window);
gboolean            gtk_window_get_deletable            (GtkWindow *window);
//GList*              gtk_window_get_default_icon_list    (void);
//void                gtk_window_get_default_size         (GtkWindow *window,gint *width,gint *height);
gboolean            gtk_window_get_destroy_with_parent  (GtkWindow *window);
//void                gtk_window_get_frame_dimensions     (GtkWindow *window,gint *left,gint *top,gint *right,gint *bottom);
gboolean            gtk_window_get_has_frame            (GtkWindow *window);
//GdkPixbuf*          gtk_window_get_icon                 (GtkWindow *window);
//GList*              gtk_window_get_icon_list            (GtkWindow *window);
gchar*              gtk_window_get_icon_name            (GtkWindow *window);
GdkModifierType     gtk_window_get_mnemonic_modifier    (GtkWindow *window);
gboolean            gtk_window_get_modal                (GtkWindow *window);
//void                gtk_window_get_position             (GtkWindow *window,gint *root_x,gint *root_y);
gchar*        gtk_window_get_role                 (GtkWindow *window);
//void                gtk_window_get_size                 (GtkWindow *window,gint *width,gint *height);
//gchar*        gtk_window_get_title                (GtkWindow *window);
GtkWindow*          gtk_window_get_transient_for        (GtkWindow *window);
GdkWindowTypeHint   gtk_window_get_type_hint            (GtkWindow *window);
gboolean            gtk_window_get_skip_taskbar_hint    (GtkWindow *window);
gboolean            gtk_window_get_skip_pager_hint      (GtkWindow *window);
gboolean            gtk_window_get_urgency_hint         (GtkWindow *window);
gboolean            gtk_window_get_accept_focus         (GtkWindow *window);
gboolean            gtk_window_get_focus_on_map         (GtkWindow *window);
//GtkWindowGroup*     gtk_window_get_group                (GtkWindow *window);
moveX:y: void                gtk_window_move                     (GtkWindow *window,gint x,gint y);
gboolean            gtk_window_parse_geometry           (GtkWindow *window,gchar *geometry);
void                gtk_window_reshow_with_initial_size (GtkWindow *window);
resizeWidth:height: void                gtk_window_resize                   (GtkWindow *window,gint width,gint height);
//void                gtk_window_set_default_icon_list    (GList *list);
//void                gtk_window_set_default_icon         (GdkPixbuf *icon);
//gboolean            gtk_window_set_default_icon_from_file(gchar *filename,GError **err);
//void                gtk_window_set_icon                 (GtkWindow *window,GdkPixbuf *icon);
//void                gtk_window_set_icon_list            (GtkWindow *window,GList *list);
//gboolean            gtk_window_set_icon_from_file       (GtkWindow *window,gchar *filename,GError **err);
void                gtk_window_set_icon_name            (GtkWindow *window,gchar *name);
//void                gtk_window_set_auto_startup_notification(gboolean setting);
//gdouble             gtk_window_get_opacity              (GtkWindow *window);
//void                gtk_window_set_opacity              (GtkWindow *window,gdouble opacity);



void gtk_widget_unparent (GtkWidget *widget);
void gtk_widget_show (GtkWidget *widget);
void gtk_widget_show_now (GtkWidget *widget);
void gtk_widget_hide (GtkWidget *widget);
void gtk_widget_show_all (GtkWidget *widget);
void gtk_widget_hide_all (GtkWidget *widget);
void gtk_widget_map (GtkWidget *widget);

void gtk_container_add (GtkContainer *container,GtkWidget *widget);
void gtk_container_remove (GtkContainer *container,GtkWidget *widget);

cloneWithLabel: GtkButton* gtk_button_new_with_label (gchar *label);

packStart:expand:fill:padding: void gtk_box_pack_start (GtkBox *box,GtkWidget *child,gboolean expand,gboolean fill, guint padding);
packEnd:expend:fill:padding: void gtk_box_pack_end (GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding);
void gtk_box_pack_start_defaults (GtkBox *box, GtkWidget *widget);
void gtk_box_pack_end_defaults (GtkBox *box, GtkWidget *widget);
gboolean gtk_box_get_homogeneous (GtkBox *box);
void gtk_box_set_homogeneous (GtkBox *box, gboolean homogeneous);
gint gtk_box_get_spacing (GtkBox *box);
void gtk_box_set_spacing (GtkBox *box, gint spacing);
reorderChild:position: void gtk_box_reorder_child (GtkBox *box, GtkWidget *child, gint position);

cloneHomogenous:spacing: GtkHBox* gtk_vbox_new (gboolean homogeneous,gint spacing);
cloneHomogenous:spacing: GtkVBox* gtk_hbox_new (gboolean homogeneous,gint spacing);

cloneWithLabel: GtkCheckButton* gtk_check_button_new_with_label (gchar *label);
cloneWithMnemonic: GtkCheckButton* gtk_check_button_new_with_mnemonic (gchar *label);





// GtkLabel

void                gtk_label_set_text                  (GtkLabel *label,gchar *str);
void                gtk_label_set_markup                (GtkLabel *label,gchar *str);
void                gtk_label_set_markup_with_mnemonic  (GtkLabel *label,gchar *str);
void                gtk_label_set_pattern               (GtkLabel *label,gchar *pattern);
void                gtk_label_set_width_chars           (GtkLabel *label,gint n_chars);
void                gtk_label_set_max_width_chars       (GtkLabel *label,gint n_chars);
guint               gtk_label_parse_uline               (GtkLabel *label,gchar *string);
void                gtk_label_set_line_wrap             (GtkLabel *label,gboolean wrap);
guint               gtk_label_get_mnemonic_keyval       (GtkLabel *label);
gboolean            gtk_label_get_selectable            (GtkLabel *label);
gchar*        gtk_label_get_text                  (GtkLabel *label);
cloneWithMnemonic: GtkWidget* gtk_label_new_with_mnemonic         (gchar *str);
selectRegionStart:End: void                gtk_label_select_region             (GtkLabel *label,gint start_offset,gint end_offset);
void                gtk_label_set_mnemonic_widget       (GtkLabel *label,GtkWidget *widget);
void                gtk_label_set_selectable            (GtkLabel *label,gboolean setting);
void                gtk_label_set_text_with_mnemonic    (GtkLabel *label,gchar *str);
gint                gtk_label_get_width_chars           (GtkLabel *label);
gint                gtk_label_get_max_width_chars       (GtkLabel *label);
gchar*        gtk_label_get_label                 (GtkLabel *label);
gboolean            gtk_label_get_line_wrap             (GtkLabel *label);
GtkWidget*          gtk_label_get_mnemonic_widget       (GtkLabel *label);
gboolean            gtk_label_get_use_markup            (GtkLabel *label);
gboolean            gtk_label_get_use_underline         (GtkLabel *label);
gboolean            gtk_label_get_single_line_mode      (GtkLabel *label);
gdouble             gtk_label_get_angle                 (GtkLabel *label);
void                gtk_label_set_label                 (GtkLabel *label,gchar *str);
void                gtk_label_set_use_markup            (GtkLabel *label,gboolean setting);
void                gtk_label_set_use_underline         (GtkLabel *label,gboolean setting);
void                gtk_label_set_single_line_mode      (GtkLabel *label,gboolean single_line_mode);
void                gtk_label_set_angle                 (GtkLabel *label,gdouble angle);
