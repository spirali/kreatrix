/*
   wrapper.kx
   Copyright (C) 2007, 2008  Stanislav Bohm

   This file is part of Kreatrix.

   Kreatrix is free software; you can redistribute it and/or modify it under
   the terms of the GNU General Public License as published by the Free
   Software Foundation; either version 2, or (at your option) any later
   version.

   Kreatrix is distributed in the hope that it will be useful, 
   but WITHOUT ANY WARRANTY; without even the implied warranty 
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Kreatrix; see the file COPYING. If not, see 
   <http://www.gnu.org/licenses/>.
*/
	

GWrapper = Object clone do: {
	type = "ObjectWrapper".

	name <- "".

	parent <- nil.

	cname = { ^name, "*" }.

	init = { }.

	generator <- nil.

	isStruct = false.

	functions <- #().

	templateC = (File clone name: "wrapper.c") openForReading contentAsString.
	templateH = (File clone name: "wrapper.h") openForReading contentAsString.

	filename = { ^name asLowercase }.

	filenameC = { ^filename,".c" }.
	filenameH = { ^filename,".h" }.

	slotName = { 
		(name beginsWith: "Gtk")  ifTrue: [ ^name sliceFrom: 3 ].
		^name.
	}.

	extensionName = {
		^"kx",name asLowercase,"_extension".
	}.

	getType = {
		^GType clone name: name cname: cname
	}.

	parentExtension = {
		parent ifNil: [ ^nil ].
		^parent extensionName.
	}.

	functionsPrefix = { |list prev|
		list << #(((name at: 0) asLowercase)).
		prev << false.
		name asList allButFirst foreach: [ :char | 
			(char isUppercase /\ prev not) ifTrue: [
				list add: "_".
				prev << true.
			] ifFalse: [ prev << false ].
			list add: char asLowercase.
		].
		^list asString.
	}.

	typeCName = { |list|
		list << (functionsPrefix asListBy: "_").
		list insert: "TYPE" at: 1.
		^(list asStringDelimiter: "_") asUppercase.
	}.

	writeBodyTo:headerTo: = { :fileC :fileH | |dict|
		dict << replaceDictionary.

		fileC write: (templateC replaceByDictionary: dict).
		fileH write: (templateH replaceByDictionary: dict).
	}.

	codeParentExtension = { |p|
		p << parentExtension.
		p ifNil: [ ^"NULL" ].
		^"&",p.
	}.

	
	functionsCode = { 
		^(functions collect: [ :func | func code ]) asString.
	}.

	functionsTableCode = { 
		^(functions collect: [ :func | 
			"\t\t{\"",func slotName,"\",", func numberOfParameters,",",func wrapperCName,"},\n" ]) asString.
	}.


	initPrototypeCode = "".

	markCode = "".

	freeCode = "".

	newFromCode = "".

	extraCode = "".

	initExtensionCode = "".

	replaceDictionary = {
		^#( ("%name%" => name asLowercase)
		   ("%Name%" => name)
		   ("%NAME%" => name asUppercase)
		   ("%ctype%" => cname)
		   ("%parent_extension%" => codeParentExtension)
		   ("%cfunctions%" => functionsCode)
		   ("%cfunctions_table%" => functionsTableCode)
		   ("%init_prototype%" => initPrototypeCode)
		   ("%mark%" => markCode)
		   ("%free%" => freeCode)
		   ("%new_from%" => newFromCode)
		   ("%extra_code%" => extraCode)
		   ("%init_extension%" => initExtensionCode)
		) asDictionary.
	}.


	initExtensionString = {
		^"\tkx", name asLowercase, "_extension_init();".
	}.

	callInitPrototypeString = {
		|var str|
		var << name asLowercase.
		str << "\tKxObject *",var," = kx", name asLowercase, "_new_prototype(KXCORE->base_object);\n".
		^str,
			"\tkxcore_add_prototype(KXCORE, ",var,");\n",
			"\tkxobject_set_slot_no_ref2(self, KXSYMBOL(\"",slotName,"\"),",var,");\n".

	}.

	removePrototypeString = {
		^"kxcore_remove_prototype(KXCORE, &", extensionName,");".
	}.

	initFunctions = { 


	}.

}.
