/*
   test.kx
   Copyright (C) 2007, 2008  Stanislav Bohm

   This file is part of Kreatrix.

   Kreatrix is free software; you can redistribute it and/or modify it under
   the terms of the GNU General Public License as published by the Free
   Software Foundation; either version 2, or (at your option) any later
   version.

   Kreatrix is distributed in the hope that it will be useful, 
   but WITHOUT ANY WARRANTY; without even the implied warranty 
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Kreatrix; see the file COPYING. If not, see 
   <http://www.gnu.org/licenses/>.
*/
	

(isLoaded: #test) ifTrue: [ ^getModule: #test ].
registerAs: #test.

TestCase = Object clone do: {
	
	type = "TestCase".

	_findTestSlots = {
		|list|
		list << List clone.
		self slots foreach: [ :eachSlot |
			(eachSlot asString beginsWith: "test") ifTrue: [
				list add: eachSlot.
			]
		].
		^list.
	}.

	run = {
		|list|
		list << self _findTestSlots.
		list foreach: [ :eachSlot | |slotCount|
			("Running '", eachSlot asString,"' ... ") print.
			stdout flush.
			slotCount << self slots size.
			
			self perform: eachSlot.

			(slotCount != self slots size) ifTrue: [
				throw: (Exception clone 
					message: "Slot modification in test object").
			].
			"OK" println.
		].
		("All tests (", list size asString,") passed") println.
	}.

	assertFailed = {
			throw: (Exception clone message: "Assert failed!").
	}. //here

	assert:equals: = { :aObject1 :aObject2 | 
		(aObject1 == aObject2) ifFalse: [ assertFailed ]
	}.

	assert: = { :aBoolean |
		aBoolean ifFalse: [ assertFailed ]
	}
}.

/** From module "test" */
true assertTrue = {}.
/** From module "test" */
false assertFalse = true slot: #assertTrue.

/** From module "test" */
true assertFalse = { throw: (Exception clone message: "Assert failed!")}.

/** From module "test" */
false assertTrue = true slot: #assertFalse.

/** From module "test" */
ScopedBlock assertException: = { :anException | 
	catch: anException do: [ :e | ^self].
	throw: (Exception clone message: "Assert failed!").
}.
