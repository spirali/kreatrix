/*
   bytecode.kx
   Copyright (C) 2007, 2008  Stanislav Bohm

   This file is part of Kreatrix.

   Kreatrix is free software; you can redistribute it and/or modify it under
   the terms of the GNU General Public License as published by the Free
   Software Foundation; either version 2, or (at your option) any later
   version.

   Kreatrix is distributed in the hope that it will be useful, 
   but WITHOUT ANY WARRANTY; without even the implied warranty 
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Kreatrix; see the file COPYING. If not, see 
   <http://www.gnu.org/licenses/>.
*/
	

(isLoaded: #bytecode) ifTrue: [ ^getModule: #bytecode ].

loadCLibrary: "bytecode".

DecompiledCodeBlock = Object clone do: {
	type = "DecompiledCodeBlock".

	codeblock <- CodeBlock.
	instructions <- #()
}.

Instruction do: {
	
	_msgDict = #(
		(PUSH_LITERAL => #_detailStringForLiteral)
		(PUSH_LOCAL => #_detailStringForLocal)
		(UPDATE_LOCAL => #_detailStringForLocal)


		(SEND_BINARY => #_detailStringForMessage)
		(SEND_UNARY => #_detailStringForMessage)
		(SEND_KEYWORD => #_detailStringForMessage)

		(SEND_LOCAL_UNARY => #_detailStringForMessage)
		(SEND_LOCAL_KEYWORD => #_detailStringForMessage)

		(SEND_RESEND_UNARY => #_detailStringForMessage)
		(SEND_RESEND_KEYWORD => #_detailStringForMessage)


	) asDictionary.


	asString = { ^name }.

	prettyString = { |list msg message|
		list << #(name).


		0 to: parametersCount do: [ :i | |param|
			list add: " ".
			list add: (parameterAt: i).
		].


		message << _msgDict at: instructionType ifAbsent: [ nil ].
		message ifNotNil: [ 
			list add: " (".
			list add: (perform: message).
			list add: ")".
		].

		^list asString.
	}.

	_detailStringForLiteral = {
		^(codeblock literals at: (parameterAt: 0)) printString.
	}.

	_detailStringForMessage = {
		^(codeblock messageNames at: (parameterAt: 0)) printString.
	}.

	_detailStringForLocal = {
		^(codeblock locals at: (parameterAt: 0)) printString.
	}.


}.

CodeBlock do: {
	
	decompile = {
		|decompiled|
		decompiled << bytecode DecompiledCodeBlock clone.
		decompiled codeblock: self.
		decompiled instructions: instructionsList.
		^decompiled.
	}
}.

registerAs: #bytecode.

