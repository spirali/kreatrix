

box BrowserMode = Object clone do: {
	type = "box BrowserMode".
	
	name <- "Generic mode".

	browser <- nil.

	SummaryMode = clone do: {
		name: "Summary".

		textbuffer <- nil.

		_createTextView = { |scrolled textview|
			scrolled << gtk ScrolledWindow clone.
			scrolled policyHorizontal: gtk POLICY_AUTOMATIC 
					 policyVertical: gtk POLICY_AUTOMATIC.

			textview << gtk TextView clone show.
			textbuffer: textview buffer.
			scrolled add: textview.
			^scrolled.
		}.

		activate = {  
			browser modeWidget: _createTextView.
		}.

		objectSelected: = { :anObject |
			textbuffer text: #(
				(anObject asString) "\n"
				"Type: " (anObject type) "\n"
				"Parent: " (anObject parent type) "\n"
			
			) asString.
		}

	}.

	DummyMode = clone do: {
		name: "Dummy".

		activate = { |widget|
			widget << gtk Button cloneWithLabel: browser selectedObject printString.
			browser modeWidget: widget.
		}.

	}.


	activate = {
		browser modeWidget: nil.
	}.

	deactivate = {}.

	objectSelected: = { :anObject | }.

}.

localImport: "browser_bytecode.kx".

box Browser = gtk Window clone do: {
	type = "box Browser".

	treeview <- nil.
	textview <- nil.

	rootObject = Lobby.

	rootObject: = { :anObject | rootObject = anObject. freezeSlot: #rootObject }.
	rootObjectName <- "Lobby".

	modeComboBox <- nil.

	modes = #().

	modeWidget = nil.
	mode <- box BrowserMode.

	mainBox <- nil.

	openBrowserFor:name: = { :anObject :name | |browser|
		browser << box Browser clone.
		browser object: anObject name: name.
		browser show.
		^browser
	}.

	onDestroyQuitGtk = {
		signal: "destroy" connect: [ :w | gtk mainQuit ].
	}.

	object:name: = { :anObject :aString | |model path|
		title: "Browser: ",aString.
		rootObject: anObject.
		rootObjectName: aString.

		model << _createInitModel.
		treeview model: model.

		activateMode: modes first.
	}.

	_createMenu = { |menu item|
		menu << gtk Menu clone.
		
		item << gtk MenuItem cloneWithLabel: "Browse selected object".
		item signal: "activate" connect: [ :w | 	
			openBrowserFor: selectedObject name: selectedName.
		].
		menu append: item.


		item << gtk MenuItem cloneWithLabel: "Open".
		item submenu: menu.

		^gtk MenuBar clone append: item.
	}.

	init = { |scrolled|
		resize: 400@550.
		borderWidth: 1.

		mainBox:  gtk VBox clone.

		mainBox homogeneous: false.
		add: mainBox.
		mainBox spacing: 0.

		mainBox packStart: _createMenu expand: false fill: false padding: 0.

		scrolled << gtk ScrolledWindow clone.
		mainBox packStart: scrolled.
		scrolled policyHorizontal: gtk POLICY_AUTOMATIC 
		         policyVertical: gtk POLICY_AUTOMATIC.


		treeview: _createView.
		scrolled add: treeview.

		modeComboBox: gtk ComboBox cloneWithTextModel.
		
		modes foreach: [ :mode |
			modeComboBox appendText: mode name.
		].

		modeComboBox signal: "changed" connect: [ :w | activateMode: (modes at: w active) ].

		mainBox packStart: modeComboBox expand: false fill: false padding: 0.

		mainBox showAll.

	}.

	

	activateMode: = { :newMode |
		mode deactivate.
		modeComboBox active: (modes indexOf: newMode).
		mode: newMode clone.
		mode browser: self.
		mode activate.
		
		isObjectSelected ifTrue: [ mode objectSelected: selectedObject ].

	}.

	_onRowExpand: = { :aTreeIter | |isInTree|
		isInTree << treeview model valueAt: aTreeIter column: 2.
		isInTree ifFalse: [ |obj slotName model child|
			model << treeview model.


			obj << model valueAt: aTreeIter column: 0.
			slotName << model valueAt: aTreeIter column: 1.
			model at: aTreeIter putValues: #(obj slotName true).
			_fillStore: treeview model parent: aTreeIter withSlotsOf: obj.

			child << model childrenOf: aTreeIter.
			model remove: child.

		].
	}.


	_onSelectRow: = { :aTreeIter | |obj slotName list|
		obj << treeview model valueAt: aTreeIter column: 0.
		mode objectSelected: obj.
	}.

	isObjectSelected = {
		^treeview selection isSelected.
	}.

	selectedObject = {
		^treeview model valueAt: (treeview selection selectedIter) column: 0.
	}.

	selectedName = {
		^treeview model valueAt: (treeview selection selectedIter) column: 1.
	}.


	_createView = { |column view|
		view << gtk TreeView clone.
		
		column << gtk TreeViewColumn clone.
		column title: "Objects".
		column renderer: gtk CellRendererText clone
		       attributes: #("text" 1)
			   expand: true.

		view appendColumn: column.

		view signal: "row-expanded" connect:
			[ :w :iter :path | 
				_onRowExpand: iter.
			].

		view signal: "cursor-changed" connect: [ :w | 
			treeview selection isSelected ifTrue: [ |iter|
				iter << treeview selection selectedIter.
				_onSelectRow: iter.
			]
		].

		^view.
	}.

	_fillStore:parent:withSlotsOf: = { :store :aTreeIter :anObject | |slots|
		slots << anObject slots.
		slots << slots reject: [ :slot | slot asString beginsWith: "__" ].
		slots sort.
		slots foreach: [ :slot | |obj iter|
			obj << anObject slot: slot.
			
			iter << store appendValues: #(obj (slot asString) false)
						  parent: aTreeIter.

			obj slots isEmpty ifFalse: [ 
				store appendValues: #(nil "" false) parent: iter.
			].
		].
	}.

	_createInitModel = { |model iter|
		model << gtk TreeStore cloneWithColumns: #(Object String false).
		iter << model appendValues: #(rootObject rootObjectName true) 
					  parent: nil.
		_fillStore: model parent: iter withSlotsOf: rootObject.
		^model.
	}.

	modeWidget: = { :aWidget |
		modeWidget ifNotNil: [ mainBox remove: modeWidget ].
		modeWidget = aWidget.
		aWidget ifNotNil: [ aWidget show. mainBox packStart: aWidget ].
	}.


	addMode: = { :aBrowserMode | 
		modes add: aBrowserMode.
	}.

	addMode: box BrowserMode SummaryMode.
	addMode: box BrowserMode BytecodeMode.
	addMode: box BrowserMode DummyMode.
}.
