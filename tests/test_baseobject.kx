
import: "test".

testObject = test TestCase clone do: {
	
	testDoesNotUnderstand = { |parent obj|
		parent << Object clone.

		parent msgSymbols = List clone.
		parent msgParamsList = List clone.

		obj << parent clone.
		obj doesNotUnderstand:parameters: = { :msgName :params | 
			msgSymbols add: msgName.
			msgParamsList add: params.
		}.

		obj + 25.
		obj unknownMessage.
		obj get: 10 from: String.
		
		assert: #(#+ #unknownMessage #get:from:) equals: parent msgSymbols.
		assert: #(#(25) #() #(10 String)) equals: parent msgParamsList.


	}.

	testPerform = { |obj res|

		obj << Object clone.
		obj msg = { ^ "test" }.
		obj msg: = { :x | ^x * 2 }.
		
		res << obj perform: #msg.
		assert: res equals: "test".

		res << obj perform: #msg: with: 10.
		assert: res equals: 20.

		res << obj perform: #msg: withList: #(20).
		assert: res equals: 40.

		[ obj perform: #zzz ] assertException: Exception DoesNotUnderstand.

	}.

	testResend = { |Obj o MyList l|
		Obj << Object clone do: {
			type = "test42".
			clone = {
				^resend clone.
			}
		}.
		o << Obj clone.
		assert: o type equals: "test42".
	
		MyList << List clone do: {
			z = false.
			at: = { :index | 
				z << true.
				^ [ resend at: index ] value.
			}
		}.
		l << MyList clone.
		l add: 10.

		assert: (l at: 0) equals: 10.
		MyList z assertTrue.
	}.

	testCopy = { |ObjA ObjB obj s t|
		ObjB << Object clone do: {
			type = "ObjB".
		}.

		ObjA << Object clone do: {
			type = "ObjA".
			run = { ^nil }.

		}.
		ObjA addParent: ObjB.

		obj << ObjA copy.

		

		(obj isSame: ObjA) assertFalse.
		(obj hasSlot: #type) assertTrue.
		(obj hasSlot: #run) assertTrue.
		assert: obj type equals: ObjA type.

		t << obj clone.
		s << t copy.
		
		assert: s slots size equals: 0.
		assert: s parent equals: obj.
		assert: ObjA parents equals: #(Object ObjB).

		t << obj clone.
		0 to: 1000 do: [ :i | |sym|
			sym << ("slot",i) asSymbol.
			t slot: sym set: i.
		].

		(t copy slots asSet == t slots asSet) assertTrue.

		s << t copy.
		s slot25 << 100.
		s slot300 << 250.
		s slot950 << 700.
		s slot10001 = 2.

		(s slot25 == 100) assertTrue.
		(s slot950 == 700) assertTrue.
		(s slots size == (t slots size + 1)) assertTrue.
	}.

	testDo = { |m1 m2 m3|
		m1 << { ^"a" }.
		m2 << { :a |  ^a }.
		m3 << { :b :c :d | ^ b,d }.

		((do: m1) == "a") assertTrue.
		((do: m2 with: "z") == "z") assertTrue.
		((do: m2 parameters: #(1)) == 1) assertTrue.
		((do: m3 parameters: #("a" "b" "c")) == "ac") assertTrue.
	}.

	testLocals = { |x y z| 

		[ |x z| 
		  x << 10. 
		  assert: x equals: 10.
		  assert: y equals: nil.
		  assert: z equals: nil.
		] value.
	  
		assert: x equals: nil.
		assert: y equals: nil.
		assert: z equals: nil.
	}.
	testLotsLocals = { |a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20|
		a19 << "a".
		a20 << "b".

		(a19 == "a") assertTrue.
		(a20 == "b") assertTrue.
	}.

	testLotsParams = { |obj|
		obj << Object clone.
		obj a:b:c:d:e:f:g:h: = { :a :b :c :d :e :f :g :h |  
		           |aa bb cc dd ee ff gg hh ii jj kk ll mm nn zz |
			aa << a.
			bb << b.
			cc << c.
			dd << d.
			ee << e.
			ff << f.
			gg << g.
			hh << h.
			ii << 1.
			jj << 2.
			kk << 3.
			ll << 4.
			mm << 3.
			nn << 3.
			zz << 4.
			^ aa + bb + cc + dd + 
			  ee + ff + gg + hh + 
			  ii + jj + kk + ll + 
			  mm + nn + zz.
		}.

		((obj a: 10
		    b: 12
			c: 28
			d: 22
			e: 8
			f: (-15)
			g: 5
			h: 100) == 190) assertTrue.
		
	}.


	testSlotUpdate = { |TestObject t|

		TestObject << self clone do: {
			init = { a = 0. }.

			run = { |b| 
				a << 10.
				b << 20.
				assert: a equals: 10.
				assert: b equals: 20.
			}
		}.
		t << TestObject clone.

		(t slots size == 1) assertTrue.
		t run.
		(t slots size == 1) assertTrue.
		(t a == 10) assertTrue.

		( (t << 5) == 5 ) assertTrue.
	}.

	testInit = { |obj o|
		obj << Object clone do: {
			init = { test = "ok" }.
		}.
		o << obj clone.
		assert: o test equals: "ok".
	}.
	
	testFreeze = { |obj|
		obj << Object clone.
		obj method = { ^"str" }.

		(obj method == "str") assertTrue.

		obj freezeSlot: #method.

		(obj method != "str") assertTrue.

		obj unfreezeSlot: #method.
		(obj method == "str") assertTrue.

	}.

	testInsertParent = {
		|a b c p|
		a << Object clone.
		b << Object clone.
		c << Object clone.
		p << Object clone.
		p insertParent: c.
		p insertParent: b.
		p insertParent: a.
		(p parents == #(a b c Object)) assertTrue.
	}.

	testDeepCopy = {
		|a b c p x y|
		p << Object clone.
		a << Object clone.
		b << Object clone.
		c << Object clone.
		a slot1 = c.
		x << Object clone.
		x slot1 = a.
		x slot2 = b.
		x addParent: p.
		
		y << x deepCopy.

		(x slot1 == a) assertTrue.
		(x slot2 == b) assertTrue.
		(x slot1 slot1 == c) assertTrue.

		(y slot1 == a) assertFalse.
		(y slot2 == b) assertFalse.
		(y slot1 slot1 == c) assertFalse.

		(x parents == y parents) assertTrue.
	}.
}.

testObject run.
