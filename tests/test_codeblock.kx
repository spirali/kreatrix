
import: "test".

codeblockTest = test TestCase clone do: {

	testParams = {
		|method|

		method << { :a :b | }.

		(method params == #(#a #b)) assertTrue.
	}.

	testActivation = {
		|method act|
		method << { :a :b | 
			|local act| 
			local << 123.
			act << activation.
			act local: #b put: #c.
			^activation.
		}.
		act << do: method parameters: #(3 11).
		method << nil.
		(act codeblock params == #(#a #b)) assertTrue.

		((act local: #a) == 3) assertTrue.
		((act local: #b) == #c) assertTrue.
		((act local: #local) == 123) assertTrue.
	}.

	testActivation2 = { |list list2|
		list << #().

		0 to: 4 do: [ :i | |z|
			z << i + 1.
			list add: [ z ].
		].

		list2 << list collect: [ :each | each value ].
		
		(list2 == #(1 2 3 4)) assertTrue.
	}.

	testActivation3 = {
		|block x z|
		x << 0.
		z << 0.
		block << [ |z|
			x < 4 ifTrue: [ 
				x << x + 1.
				(z == nil) assertTrue.
				block value.
			].
		].
		block value.
		(x == 4) assertTrue.
	}.

	testLiterals = {
		|list|
		list << #("a" "c" 'a' 'b' 'c' "AAAaaaAAA" #a #b #c 1 
		          10.5 10.4 10.1 "a" "a" "a"). 
		
		(#("a" "c" 'a' 'b' 'c' "AAAaaaAAA" #a #b #c 1
		          10.5 10.4 10.1 "a" "a" "a") == list) assertTrue.
	}.

	testRunPrototype = { |result|
		result << CodeBlock.
		(result == self) assertTrue.
	}.
}.

codeblockTest run.

