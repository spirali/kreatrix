
import: "test".

setTest = test TestCase clone do: {
	testAdd = { |set|
		set << Set clone.
		assert: set size equals: 0.

		(set contains: "One") assertFalse.
		(set contains: "Two") assertFalse.


		set add: "One".
		assert: set size equals: 1.

		(set contains: "One") assertTrue.
		(set contains: "Two") assertFalse.

		set add: "Two".
		set add: "Tree".
		assert: set size equals: 3.

		set add: "Two".
		set add: "One".
		assert: set size equals: 3.

		set add: #t1.
		set add: #t2.
		set add: #t3.
		set add: #t7.
		assert: set size equals: 7.

		(set contains: "One") assertTrue.
		(set contains: "Two") assertTrue.
		(set contains: "x") assertFalse.


		set add: #t1.
		assert: set size equals: 7.
	
		set << Set clone.
		set add: 4.
		set add: 9.
		set add: 14.
		set add: 14.

		(set contains: 4) assertTrue.
		(set contains: 9) assertTrue.
		(set contains: 14) assertTrue.
		(set contains: 19) assertFalse.
		assert: set size equals: 3.

		set << Set clone.
		set add: "sockets".
		set add: "long string, longer than others".
		assert: set size equals: 2.

	}.

	testRemove = { |set x|
		set << Set clone.
		
		set add: "Test".

		assert: set size equals: 1.
		(set contains: "Test") assertTrue.

		set remove: "Test".
		assert: set size equals: 0.
		(set contains: "Test") assertFalse.

		set << Set clone.
		set add: 4.
		set add: 9.
		set add: 14.
		set add: 14.
		assert: set size equals: 3.

		set remove: 4.
		assert: set size equals: 2.
		(set contains: 14) assertTrue.
		(set contains: 9) assertTrue.
		(set contains: 4) assertFalse.

		set addAll: #(15 16 17 20 21 22 33 100 1007 15 16).
		assert: set size equals: 11.

		set remove: 20.

		(set contains: 21) assertTrue.
		(set contains: 22) assertTrue.
		(set contains: 20) assertFalse.
		(set contains: 100) assertTrue.

		set remove: 15.
		assert: set size equals: 9.
		
		x << false.
		set remove: 17 ifAbsent: [ x << true ].
		x assertFalse.
		set remove: "zz" ifAbsent: [ x << true ].
		x assertTrue.

	}.
	
	testForeach = { |set list|
		set <<  #("a" "b" "a" 3 5 3 6 7) asSet.

		list << List clone.
		set foreach: [ :each | list add: each ].

		assert: list size equals: set size.
		assert: list size equals: 6.
	}.

	testCopy = { |set1 set2|
		set1 << #("ZZZZZZ" "b" "c" 7 5 4 10 11 17 80) asSet.
		set2 << set1 copy.

		assert: set1 equals: set2.
		(set1 isSame: set2) assertFalse.
	}.

	testEquals = { |a b c d|
		a << #("a" "b" "zzzzz" 10 30 31) asSet.
		b << #(10 10 "b" "a" "zzzzz" 10 30 31)  asSet.
		c << #(15 10 30 31 "b" "a") asSet.
		d << #() asSet.

		assert: a equals: b.
		(a != c) assertTrue.
		(b == c) assertFalse.
		(b == d) assertFalse.
	}.

	testAsList = { |list|
		list << #(5 5 5 7 8 9 44 44 1 7 9 8 44 5) asSet asList sort.
		assert: list equals: #(1 5 7 8 9 44).
	}.
}.

setTest run.

