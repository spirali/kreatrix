
import: "random".

Benchmark clone do: {
	
	objectCount = 500.
	
	initRun = {
		|a b c d t|
		
		random = random Random clone.

		a << Object clone do: {
			type = "Object_A".
			
			a <- 0.
			b <- 0.

			operationX = {
				a << a + 1.
			}.

			operationY = {
				b << b + 1.
			}.
		}.

		b << Object clone do: {
			type = "Object_B".
			
			counter <- 0.			

			operationX = {}.

			operationY = {
				(counter < 100) ifTrue: [ counter: counter + 1 ].
			}.
		}.

		c << Object clone do: {
			type = "Object_C".
			
			clonedObj <- nil.

			operationX = {
				clonedObj:  self clone.
			}.

			operationY = {
				operationX.
			}.
		}.

		d << Object clone do: {
			type = "Object_D".
			
			clonedObj <- nil.

			val = 4.

			set: = { :anObject |
				val = anObject
			}.

			get = {
				^val.
			}.

			actionK = { |g|
				set: (get + 5).
				^get > 10.
			}.

			actionL = {
				set: (get - 3).
				get < 100.
			}.

			operationX = {
				actionK ifTrue: [ actionL ].
			}.

			operationY = {
				actionK ifTrue: [ actionL ].
			}.
		}.
		
		list = #().
		t << #(a b c d).
		objectCount repeat: [ 
			list add: (t pickRandom: random) clone.
		].
	}.

	run = {
		
		1000 repeat: [ 
			list foreach: [ :obj |
				((random getInteger: 2) > 0) ifTrue: [ 
					obj operationX.
				] ifFalse: [
					obj operationY.
				].
			]
		].
	}
}
