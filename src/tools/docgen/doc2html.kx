
Lobby __Path = List clone do: {
	type = "Path".

	cloneWithList: = { :aList |  |clone|
		clone << self clone.
		clone join: aList.
		^clone.
	}.

	asFilename = { |clone|
		str << "".
		self foreach: [ :each | str << str,each,"_" ].
		^str.
	}.

	parseDocPath: = { :aString | |pos|
		pos << 0.
		[
			|p|
			p << aString find: "#" from: pos.
			p isNotNil ifTrue: [
				add: (aString sliceFrom: pos to: p).
				pos << p + 1.
			] ifFalse: [
				add:(aString sliceFrom: pos to: aString size).
			].
			p isNotNil.
		] whileTrue.
	}.
}.

Lobby __DocPage = Object clone do: {

	type = "__DocPage".

	head = (File clone name: "head.html") openForReading contentAsString.
	tail = (File clone name: "tail.html") openForReading contentAsString.
	body = "".
	outputPath = "../../../docs/html/".
	object = nil.
	objectName = "".
	path <- List clone.


	object: = { :anObject |
		object = slot: #anObject.

		path = __Path clone.
		path parseDocPath: (slot: #anObject) __doc_path.
		objectName = path last.
		path pop.
	}.

	/*path: = { :aList | 
		path = aList
	}.*/


	save = { |file|
		file << File clone name: outputPath, (slot: #object) __doc_filename.
		file openForWriting.
		file write: head.
		_writeBodyTo: file.
		file write: tail.
		file close.
		"." print.
		stdout flush.
	}.

	saveListTo: = { :aString | |file|
		file << File clone name: outputPath, aString.
		file openForWriting.
		file write: head.
		_writeListTo: file.
		file write: tail.
		file close.
	}.

	_writeBodyTo: = { :aFile | 
		_writePathTo: aFile.
		aFile write: "<hr/>".

		_writeTitleTo: aFile.

		_writeObjectShortDocTo: aFile.
		_writeParametersTo: aFile.

		_writeObjectDocTo: aFile.
		_writeParentTo: aFile.
		_writeSlotsTo: aFile.
		_writeNotesTo: aFile.
		aFile write: "<hr/>".
		_writePathTo: aFile.
	}.


	_writePathTo: = { :aFile | |pathprefix|
		"| " writeTo: aFile.
		pathprefix << "".
		path foreach: [ :each |
			aFile write: "<a href='",pathprefix,(_slotNameAsFilename: each),".html'>".
			each writeTo: aFile.
			aFile write: "</a> > ".
			pathprefix << pathprefix,each,"-".
		].
	
		aFile write: "<a href='",pathprefix,(_slotNameAsFilename: objectName),".html'>".
		objectName writeTo: aFile.
		aFile write: "</a>".
		" |" writeTo: aFile.

	}.

	_writeObjectDocTo: = { :aFile |
		((slot: #object) hasSlot: #__doc) ifTrue: [ |docs list|

			aFile writeln: "<h3>Decription</h3><p>".
			docs << (slot: #object) __doc.
			list << docs asListBy: "\n".
			list add: "".
			list removeAt: 0.
			list foreach: [ :each | aFile writeln: each ].
		] ifFalse: [
			aFile writeln: "<p>".
		].
		aFile writeln: "</p>".
	}.

	_writeObjectShortDocTo: = { :aFile |
		aFile writeln: "<p>".
		((slot: #object) hasSlot: #__doc) ifTrue: [ |docs list|
			docs << (slot: #object) __doc.
			list << docs asListBy: "\n".
			list add: "".
			aFile writeln: list first.
		] ifFalse: [
			aFile writeln: "".
		].
		aFile writeln: "</p>".
	}.


	_completeName:withParameters: = {	:aSlotName :aParametrList | 
		|str index list|
		str << "".
		index << 0.

		list << aSlotName asListBy: ":".

		list foreach: [ :each | 
			|z|
			z << (each last) isAlphaNumeric 
				ifTrue: [ ":" ] 
				ifFalse: [ "" ].
			str << str, " <b>", each, z, "</b> <i>", (aParametrList at: index) asString,"</i>".
			index << index + 1.
		].
		^str.
	}.

	_writeParametersTo: = { :aFile | |params|
		params << List clone.
		((slot: #object) respondsTo: #params) ifTrue: [
			params << (slot:#object) params.
		].

		((slot: #object) hasSlot: #__doc_params) ifTrue: [
			params << (slot: #object) __doc_params asListBy:" ".
		].

		params size != 0  ifTrue: [
			aFile writeln: "<h3>Parameter</h3>".
			aFile write: (_completeName: objectName withParameters: params).
			aFile writeln: "<br/>".
		].

	}.

	_writeTitleTo: = { :aFile |
		aFile writeln: "<h2>",objectName,"</h2>".
	}.

	_writeNotesTo: = { :aFile | 
		(slot: #object) isActivable ifTrue: [
			aFile writeln: "<h3>Notes</h3>".
			aFile writeln: "Object is activable.".

		].

	}.

	_slotNameAsFilename: = { :aString |  |pos list|
		pos << 0.
		list << aString asList.
		list foreach: [ :aChar | 
			// TODO: !! change to character literal
			
			aChar asString == ":" ifTrue: [ list at: pos put: ("." at: 0). ].
			aChar asString == "/" ifTrue: [ list at: pos put: ("slash" at: 0). ].

			pos << pos + 1.
		].

		(list last == ("." at: 0)) ifTrue: [ list pop. ].

		^list asString.
		/*^aString.*/
	}.

	_firstLineOrEmptyLine: = { :aString | |list|
		list << aString asListBy: "\n".
		list add: "".
		^list first.
	}.

	_writeForeachInObject:to: = { :anObject :aFile | 
		(slot: #anObject) sort.

		aFile writeln: "<table>".
		(slot: #anObject) foreach: [ :each |
			(each asString beginsWith: "__") ifFalse: [
				|obj filename|
				obj << (slot: #object) slot: each asSymbol.
				filename << ((slot: #obj) __doc_filename).
				aFile write: "<tr><td><a href='",filename,"'".
				((slot: #obj) hasSlot: #__doc) ifFalse: [ aFile write: " class='nodoc'" ].//,(slot: #object) __doc size ].
				aFile write: ">".
				aFile write: each asString.
				aFile writeln: "</a><td>".

				((slot: #obj) hasSlot: #__doc) ifTrue: [ aFile writeln: (_firstLineOrEmptyLine: (slot:#obj) __doc)  ].//,(slot: #object) __doc size ].


				aFile writeln: "<br/></a>".
			]

		].
		
		aFile writeln: "</table>".
	}.

	_writeForeachInList:to: = { :anObject :aFile | 
		anObject sort.
		anObject foreach: [ :each |
			(each asString beginsWith: "__") ifFalse: [
				|obj filename|
				obj << (slot: #object) at: each.
				filename << ((slot: #obj) __doc_filename).
				aFile write: "<a href='",filename,"'>".
				aFile write: each asString.
				aFile writeln: "</a><br/>".
			]
		]


	}.

	_writeSlotsTo: = { :aFile | 
		((slot: #object) slots size == 0) ifTrue: [ ^nil. ].
		aFile writeln: "<h3>Slots</h3>".
		aFile writeln: "".
		_writeForeachInObject: (slot: #object) slots to: aFile.
	}.

	_writeLinkToObject:to: =  { :anObject :aFile |
		 |filename path|
		 filename << (slot:#anObject) __doc_filename.
	 	 aFile writeln: "<a href='",filename,"'>".
		 path << __Path clone.
		 path parseDocPath: (slot: #anObject) __doc_path.
		 aFile write: path last.
		 aFile writeln: "</a>".
	}.

	_writeParentTo: = { :aFile |
		|parent|
		aFile writeln: "<h3>Parent</h3>".

		parent << (slot: #object) parent.
		((slot: #parent) hasSlot: #__doc_path) 
			ifTrue: [ _writeLinkToObject: (slot: #parent) to: aFile. ]
			ifFalse: [ aFile write: (slot: #parent) type. ]
	}.

	_writeListTo: = { :aFile | 
		_writePathTo: aFile.
		aFile write: "<hr/>".
		_writeTitleTo: aFile.
		
	/*	pathprefix = objectName,"#".
		object foreach: [ :each |
			aFile write: "<a href='",pathprefix,each,".html'>",each,"</a><br/>".
		].*/
		_writeForeachInList: object keys to: aFile.
		aFile write: "<hr/>".
		_writePathTo: aFile.
	}.
	
}.

Object __saveDoc = { |page|
		((slot: #self) hasSlot: #__doc_mark) ifTrue: [ ^nil ].
		(slot: #self) __doc_mark = 1.

		page << __DocPage clone.
		page object: (slot: #self).
		page save.
		(slot: #self) slots foreach: [ :each | 
			(each asString beginsWith: "__") ifFalse: [
				((slot: #self) slot: each)__saveDoc	
			]
		].
}.

Object __buildFilename: = { :aString |  |pathprefix|


	((slot: #self) hasSlot: #__doc_path) ifTrue: [ 
		((slot: #self) __doc_path size > aString size) ifFalse: [ ^nil. ].
	].

	(slot: #self) __doc_path = aString.
	pathprefix << aString,"#".
	(slot: #self) slots foreach: [ :each | 
		(each asString beginsWith: "__") ifFalse: [
			((slot: #self) slot: each)__buildFilename: pathprefix,each asString.
		]
	].
	//(slot: #self) __doc_path println.
}.

Object __doc_filename = {
	/*((slot: #self) hasSlot: #__doc_path) ifFalse: [ 
		throw: (Exception cloneWithMessage: "__doc_path not found").
	].*/
	|list pos|
	pos << 0.
	list << (slot: #self) __doc_path asList.
	list foreach: [ :aChar | 
		// TODO: !! change to character literal
		aChar asString == ":" ifTrue: [ list at: pos put: ("." at: 0). ].
		aChar asString == "/" ifTrue: [ list at: pos put: ("slash" at: 0). ].
		aChar asString == "#" ifTrue: [ list at: pos put: ("-" at: 0). ].
		pos << pos + 1.
	].
	(list last == ("." at: 0)) ifTrue: [ list pop. ].
	^list asString,".html".
}.



__ObjectMap = Dictionary clone do: {
	type = "ObjectMap".

	grabSlotsFromObject: = { :anObject |
		anObject slots foreach: [ :each |
			self at: each put: (anObject slot: each).
		]
	}.

	savePagesWithPath: = { :aPath | 
		self foreachKey: [ :each | 
			(self at: each) __saveDoc.
		].
	}.

	saveAll = {	
		self foreachKey: [ :each | 
			(self at: each) __saveDoc.
		].
		stdout writeln.
	}.


	buildFilenames = { 
		|pathprefix|
		pathprefix << "index#".//,aString,"#".
		self foreachKey: [ :each |

			(self at: each) __buildFilename: pathprefix, each asString.
		]
	}.

}.



__Categories = Dictionary clone do: {
	type = "Categories".

	part: = { :anObjectMap |
		self at: "Lobby" put: anObjectMap clone.
	}.

	put:asCategory: = { :anObjectMap :categoryName | 
		self at: categoryName put: anObjectMap.
	}.

	buildFilenames = {
		self foreachKey: [ :each |
			self buildFilenamesForCategory: each.
		].
	}.

	saveAll = {
		self foreachKey: [ :each |
			self saveCategory: each.
		].
	}.

	buildFilenamesForCategory: = { :aString |
		|objmap|
		("category: ",aString) println.
		objmap << self at: aString.
		objmap buildFilenames: aString.
	}.


	saveCategory: = { :aString |
		|objmap page|
		("category: ",aString) println.
		objmap << self at: aString.
		objmap savePagesWithPath: (__Path cloneWithList: #(aString)).

		page << __DocPage clone.
		page object = objmap.
		page path: (__Path cloneWithList: #()).
		page objectName = aString.
		page saveListTo: aString,".html".

	}.

}.


VM docFlag ifFalse: 
	[ throw: (Exception clone message: "Documentation mode must be enabled"). ].

"Modules :" print.
args foreach: [ :each | (" ",each) print. ].
"" println.

args foreach: [ :each | 
	each != "Lobby" ifTrue: [ import: each.  ].
].

"Initing .. " println.

doFile: "out.kx".
// Need for documentation of std lib
doFile: "../../vminit/vminit.kx".
"Init finished" println.

objmap = __ObjectMap clone.
args foreach: [ :each | 
	|obj|
	obj << (each == "Lobby") ifTrue: [ Lobby ] ifFalse: [ Lobby slot: each asSymbol ].
	objmap at: each put: obj
].
"BUILD FILENAMES ... " println.
objmap buildFilenames.
"BUILD FILES ... " println.
objmap saveAll.

objmap = __ObjectMap clone.
args foreach: [ :each |
	|obj|
	obj << (each == "Lobby") ifTrue: [ Lobby ] ifFalse: [ Lobby slot: each asSymbol ].
	objmap at: each put:  obj.
].

page = __DocPage clone.
page object = objmap.
page path: (__Path cloneWithList: #()).
page objectName = "index".
page saveListTo: "index.html".

