/** All reachable slots in this code has prefix __ to ignore in 
    generated documentation 
**/

String do: {
	__substituteDict = #(
		(':' => ".")
		('/' => "slash")
	) asDictionary.

	__htmlSubstitue = #(
		('&' => "&amp;")
		('<' => "&lt;")
		('>' => "&gt;")
	) asDictionary.


	__asFilename = { |str|
		^(asList collect: [ :char |
			__substituteDict at: char ifAbsent: [ char ].
		]) asString.
	}.

	__asHtml = { |str|
		^(asList collect: [ :char |
			__htmlSubstitue at: char ifAbsent: [ char ].
		]) asString.
	}
}.

Object do: {

	__slots = {
		^slots reject: [ :slot | slot asString beginsWith: "__" ].
	}.

	__test: = { :slot | 
		^slots detect: [ :each | each == slot ].
	}.

	__createName:path: = { :aName :path|
		(hasSlot: #__name) ifTrue: [ 
			(__path size <= path size) ifTrue: [ ^self ].
		].
		__name = aName.
		path add: self.
		__path = path copy.
		__slots foreach: [ :slot |
			(slot: slot) __createName: slot asString path: path.
		].
		path pop.
	}.

	__clean = {
		(hasSlot: #__path) ifFalse: [ ^self ].
		(__path isEmpty) ifTrue: [ ^self ].
		__path = #().
		__saved = #().
		slots foreach: [ :slot |
			(slot: slot) __clean.
		].
	}.

	__savePage = { 
		|page|
		page << __ObjectPage clone.
		page object: self.
		page save.
	}.

	__filename = {
		|str|
		str << __path first __name.
		__path allButFirst foreach: [ :each | str << str, "-", each __name ].
		^str __asFilename,".html".
	}.
	
	__save = {
		(self hasSlot: #__saved) ifTrue: [ ^self ].
		__saved = true.
		__savePage.
		__slots foreach: [ :slot |
			(slot: slot) __save.
		].
	}.

	__objectsInSlots = {
		^__slots collect: [ :each | slot: each ].
	}.

	__shortDescription = { |line cat|
		(hasSlot: #__doc) ifFalse: [ ^"" ].
		line << __firstLineOfDoc.
		cat << line sliceBetween: "[" and: "]".
		(cat isEmpty) ifFalse: [ line << line replace: "[",cat,"]" to: "" ].
		^line.
	}.

	__parametersList = { 
		(hasSlot: #__doc_params) ifTrue: [
			^__doc_params asListBy: " ".
		].
		(respondsTo: #params) ifTrue: [
			^ params.
		].
		^#().
	}.

	__parametersString = {
		|list str params|
		params << __parametersList.
		list << __name asListBy: ":".

		(params size < list size) ifTrue: [ ^"" ].
		str << "".
		0 to: (list size) do: [  :index |
			|name|
			name << list at: index.
			(name last) isAlphaNumeric ifTrue: [ name << name,":" ].
			str << str,"<b>",name,"</b> <i>", (params at: index),  "</i>".
		].
		^str.
	}.

	__hasDoc = {
		^hasSlot: #__doc.
	}.

	__longDescription = {
		(hasSlot: #__doc) ifFalse: [ ^"" ].
		^((__doc asListBy: "\n") allButFirst) asStringDelimiter: "\n".
	}.

	__notes = {
		|list|
		list << #().
		isActivable ifTrue: [ list add: "Object is activable " ].
		^list.
	}.
	
	__firstLineOfDoc = { |list|
		(hasSlot: #__doc) ifFalse: [ ^"" ].
		list << (__doc asListBy: "\n").
		^(list isEmpty) ifTrue: [ "" ] ifFalse: [ list first ].
	}.

	__category = { |cat line list|
		cat << (__firstLineOfDoc sliceBetween: "[" and: "]") trim.
		(cat == "") ifFalse: [
			^cat.
		].
		^"unsorted".
	}.
}.

__Link = Object clone do: {
	type = "__Link".

	href <- "file.html".
	text <- "LINK".
	attributes <- Dictionary clone.

	init = { 
		attributes: Dictionary clone.
	}.

	attributesAsHtml = { |str|
		str << "".
		attributes foreachKeyValue: [ :key :value |
			str << str," ", key asString, " = '", value, "'"
		].
		^str.
	}.

	asHtml = {
		^"<a ",attributesAsHtml," href = '", href, "'>", text,"</a>".
	}.
}.

__LinkToObject = __Link clone do: {
	type = "__LinkToObject".
	
	object: = { :anObject |
		anObject __hasDoc ifFalse: [ 
			attributes at: "class" put: "nodoc".
		].
		href: anObject __filename __asHtml.
		text: anObject __name __asHtml.
	}.

	object:name: = { :anObject :name |
		anObject __hasDoc ifFalse: [ 
			attributes at: "class" put: "nodoc".
		].
		href: anObject __filename __asHtml.
		text: name __asHtml.
	}.
}.


String __asText = {
	^__Text clone string: self.
}.

__Text = Object clone do: {
	type = "__Text".
	string <- "".
	asHtml = { ^string }.
}.

__TableRow = Object clone do: {
	type = "__TableRow".

	columns <- #().

	asHtml = {
		^(columns collect: [:each| "<td>",each asHtml,"</td>" ]) asString.
	}.
}.

__Table = Object  clone do: {
	type = "__Table".
	rows <- #().

	init = { rows: #() }.

	addRow: = { :columns | 
		rows add: (__TableRow clone columns: columns).
	}.

	asHtml = {
		^"<table>",
		(rows collect: [:each| "<tr>",each asHtml,"</tr>\n" ]) asString,
		"</table>".
	}.
}.

__Section = Object clone do: {
	type = "__Section".

	name <- "Section".

	body <- "".

	level <- 2.

	asHtml = { 
		^"<h",level,">",name,"</h",level,">\n<p>\n", body, "\n</p>\n".
	}.
}.

__SectionContainer = __Section clone do: {
	type = "__SectionContainer".

	sections = #().


	sections: = { :list | 
		sections = list.
		list foreach: [ :each | each level: level + 1 ].
	}.

	body = {
		^(sections collect: [ :each | each asHtml ]) asString.
	}
}.

__ListSection = __Section clone do: {
	type = "__ListSection".
	
	list <- #().

	body = {
		^"<ul>",
		 (list collect: [ :each | "<li>",each asHtml,"</li>\n" ]) asString, 
		 "</ul>".
	}.
}.

__LinkSection = __ListSection clone do: {
	type = "__LinkSection".

	objects: = { :objects | 
		list: (objects collect: [ :each |
			(__LinkToObject clone object: each)
		])
	}.

}.

__SlotSection = __Section clone do: {
	type = "__SlotSection".
	
	name: "Slots".
	objects <- #().

	body = {
		|table|
		table << __Table clone.

		objects sort: [ :a :b | a __name < b __name ].

		objects foreach: [ :each |  |link|
			link << __LinkToObject clone object: each.
			table addRow: #(link (each __shortDescription __asText)).
		].
		^table asHtml.
	}.

}.

__ParentSection = __LinkSection clone do: {
	type = "__ParentSection".
	name: "Parent".

	object: = { :anObject |
		resend objects: anObject parents.
	}.
}.

__Page = Object clone do: {
	type == "__Page".

	file <- File.
	headerText <- "".
	sections <- #().

	prefix = "../../../docs/html/".

	openFile: = { :filename |
		file: (File clone name: prefix,filename) openForWriting.
	}.

	writeHead = {
		file write: headString.
	}.

	writeHeader = {
		file writeln: "<h1>",headerText,"</h1>".
	}.

	writeTail = {
		file write: tailString.
	}.
	
	writeSections = {
		file write:((sections collect: [ :each | each asHtml ]) asString).
	}.


	headString = 
		(File clone name: "head.html") openForReading contentAsString.
	tailString = 
		(File clone name: "tail.html") openForReading contentAsString.
}.

__SlotCategoriesSection = __SectionContainer clone do: {
	type = "__SlotCategoriesSection".

	name: "Slots".

	object: = { :anObject | |cats objs list sec dict|
		dict << Dictionary clone.

		objs << anObject __objectsInSlots.

		cats << (objs collect: [ :object | 
			object __category.
		]) asSet.

		cats foreach: [ :each | dict at: each put: #() ].
		objs foreach: [ :each | (dict at: each __category) add: each ].
		list << #().
		dict foreachKeyValue: [ :key :value |  |sec|
			sec << __SlotSection clone.
			sec objects: value.
			sec name: key.
			list add: sec.
		].

		list sort: [ :a :b | a name < b name ].
	/*	(anObject == Object) ifTrue: [ 
			dict println.
			list println.
		].*/
	//	sec <<  __SectionContainer clone name: "Slots".
		sections: list.
	}.
}.

__ObjectPage = __Page clone do: {
	type = "__ObjectPage".

	object <- nil.

	pathLinks = { |str list|
		list << (slot: #object) __path collect: [ :each | |link obj|
			link << __LinkToObject clone.
			link object: each.
		].
		str << "| <a href='index.html'>index</a> > ",list first asHtml.
		list allButFirst foreach: [ :each |
			str << str," > ",each asHtml.
		].
		^str," |".
	}.

	save = { |obj path sec notes slot|
		obj << (slot: #object).
		path << pathLinks.

		sections: #().

		(obj __parametersList isEmpty) ifFalse: [
			sec << __Section clone name: "Parameters".
			sec body: obj __parametersString.
			sections add: sec.
		].

		sec << __Section clone name: "Description".
		sec body: obj __longDescription.
		sections add: sec.

		sec << __ParentSection clone object: obj.
		sections add: sec.

		
		sec << __SlotCategoriesSection clone object: obj.
		sections add: sec.

		notes << obj __notes.
		notes isEmpty ifFalse: [ 
			sec << __ListSection clone name: "Notes".
			sec list:
				(notes collect: [ :each | each __asText ]).
			
			sections add: sec.
		].

		openFile: obj __filename.	
		headerText: obj __name.
		writeHead.
		file writeln: path,"<hr/>".
		writeHeader.
		file writeln: obj __shortDescription.
		writeSections.

		file writeln: "<hr/>",path.
		writeTail.

	/*	obj __name println.
		stdout flush.*/
	}.
}.

__IndexPage = __Page clone do: {
	type = "__IndexPage".
	
	moduleNames <- #().

	standardModules = #("system" "sockets" "cgi" "test" "xml" "pool") asSet.

	create = { |sec mods stdmods extern|
		openFile: "index.html".
		headerText: "Index".
		
		writeHead.
		writeHeader.
		
		sections: #().

		mods << moduleNames reject: [ :each | each == "Lobby" ].

		stdmods << mods select: [ :each | standardModules contains: each ].
		extern << mods reject: [ :each | standardModules contains: each ].

		sec << __ListSection clone name: "Core".
		sec list: #( (__LinkToObject clone object: Lobby) ).
		sections add: sec.

		stdmods isEmpty ifFalse: [
			sec << __ListSection clone name: "Standard modules".
			sec list: (stdmods sort collect: [ :each | 
				__LinkToObject clone object:  (Lobby slot: each asSymbol).
			]).
			sections add: sec.
		].

		extern isEmpty ifFalse: [
			sec << __ListSection clone name: "External modules".
			sec list: (extern sort collect: [ :each | 
				__LinkToObject clone object:  (Lobby slot: each asSymbol).
			]).
			sections add: sec.
		].


		writeSections.

		writeTail.
	}
}.

/*Lobby __name = "Object".
(Lobby hasSlot: #__name) println.*/

(args isEmpty) ifTrue: [
	"Usage: doc2html.kx <modules1> <module2> ..." println.
	VM quit.
].


(args reject: [ :each | each == "Lobby" ]) foreach: [ :each | 
	import: each.
].

VM docFlag ifFalse: 
	[ throw: (Exception clone message: "Documentation mode must be enabled"). ].



doFile: "out.kx".
// Need for documentation of std lib
doFile: "../../vminit/vminit.kx".
"Init finished" println.

modules = (args reject: [ :each | each == "Lobby" ])
			collect: [ :each | each => (Lobby slot: each asSymbol) ].


modules foreach: [ :each |
	each value __createName: each key path: #().
].

Lobby __createName: "Lobby" path: #().

Lobby __save.
/*modules foreach: [ :each | 
(Lobby perform: each key asSymbol) __save.
].*/

index = __IndexPage clone.
index moduleNames: args.
index create.

Lobby __clean.
